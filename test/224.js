/* 224 */
/***/ (function(module, exports) {

module.exports = "float getDistance(sampler2D depthTexture, vec2 texCoords) \r\n{ \r\n    float depth = czm_unpackDepth(texture2D(depthTexture, texCoords)); \r\n    if (depth == 0.0) { \r\n        return czm_infinity; \r\n    } \r\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, depth); \r\n    return -eyeCoordinate.z / eyeCoordinate.w; \r\n} \r\nfloat interpolateByDistance(vec4 nearFarScalar, float distance) \r\n{ \r\n    float startDistance = nearFarScalar.x; \r\n    float startValue = nearFarScalar.y; \r\n    float endDistance = nearFarScalar.z; \r\n    float endValue = nearFarScalar.w; \r\n    float t = clamp((distance - startDistance) / (endDistance - startDistance), 0.0, 1.0); \r\n    return mix(startValue, endValue, t); \r\n} \r\nvec4 alphaBlend(vec4 sourceColor, vec4 destinationColor) \r\n{ \r\n    return sourceColor * vec4(sourceColor.aaa, 1.0) + destinationColor * (1.0 - sourceColor.a); \r\n} \r\nuniform sampler2D colorTexture; \r\nuniform sampler2D depthTexture; \r\nuniform vec4 fogByDistance; \r\nuniform vec4 fogColor; \r\nvarying vec2 v_textureCoordinates; \r\nvoid main(void) \r\n{ \r\n    float distance = getDistance(depthTexture, v_textureCoordinates); \r\n    vec4 sceneColor = texture2D(colorTexture, v_textureCoordinates); \r\n    float blendAmount = interpolateByDistance(fogByDistance, distance); \r\n    vec4 finalFogColor = vec4(fogColor.rgb, fogColor.a * blendAmount); \r\n    gl_FragColor = alphaBlend(finalFogColor, sceneColor); \r\n} "

/***/ }),